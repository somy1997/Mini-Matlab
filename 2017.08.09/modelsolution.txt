
%{
	#include "ass3_sol.tab.h"
%}


UNSIGNED  "unsigned"
FLOAT 	  "float"
SHORT 	  "short"
BREAK	  "break"
RETURN 	  "return"
VOID 	  "void"
CASE 	  "case"
CHAR 	  "char"
FOR 	  "for"
SIGNED 	  "signed"
WHILE 	  "while"
GOTO      "goto"
_BOOL 	  "Bool"
CONTINUE  "continue"
IF  	  "if"
DEFAULT   "default"
DO        "do"
INT 	  "int"
SWITCH 	  "switch"
DOUBLE 	  "double"
LONG 	  "long"
ELSE      "else"
MATRIX 	  "Matrix"


ID [_a-zA-Z][_a-zA-Z0-9]*

INT_CONST ([0])|([1-9][0-9]*)

DIG_SEQ [0-9]+
DEC "."
FRACTIONAL_CONST (({DIG_SEQ}?{DEC}{DIG_SEQ})|({DIG_SEQ}{DEC}))
SIGN ([+]|[-])
EXP_PART ([e]|[E]){SIGN}?{DIG_SEQ}
FLOAT_CONST (({FRACTIONAL_CONST}{EXP_PART}?)|({DIG_SEQ}{EXP_PART}))

ENUM_CONST {ID}


ESC_SEQ ([\\][\'\"\?\\abfnrtv])
C_CHAR (([^\'\\\n])|{ESC_SEQ})
C_CHAR_SEQ ({C_CHAR}+)
CHAR_CONST ([\']{C_CHAR_SEQ}[\'])
  
S_CHAR (([^\"\\\n])|{ESC_SEQ})
S_CHAR_SEQ ({S_CHAR}+)
STR_LITERAL ([\"]{S_CHAR_SEQ}?[\"])

MULTI_LINE_COMMENT ("/"\*(([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*)\*+"/")

WILDCARD .
SINGLE_LINE_COMMENT ([/][/]{WILDCARD}*)


WS [ \t\n]

%%

{WS}				  {;}
{SINGLE_LINE_COMMENT} 		  {;}
{MULTI_LINE_COMMENT}  		  {;}

{UNSIGNED}			{return UNSIGNED_KEYWORD;}
{BREAK}				{return	BREAK_KEYWORD;}
{RETURN} 	  		{return RETURN_KEYWORD;}
{VOID}				{return VOID_KEYWORD;}
{CASE} 	  			{return CASE_KEYWORD;}
{FLOAT}				{return	FLOAT_KEYWORD;}
{SHORT}				{return SHORT_KEYWORD;}
{CHAR} 				{return CHAR_KEYWORD;}
{FOR} 				{return	FOR_KEYWORD;}
{SIGNED} 			{return SIGNED_KEYWORD;}
{WHILE}				{return WHILE_KEYWORD;}
{GOTO}         		{return GOTO_KEYWORD;}
{_BOOL} 			{return _BOOL_KEYWORD;}
{CONTINUE} 			{return CONTINUE_KEYWORD;}
{IF} 				{return IF_KEYWORD;}
{DEFAULT}   		{return DEFAULT_KEYWORD;}
{DO} 				{return DO_KEYWORD;}
{INT} 				{return	INT_KEYWORD;}
{SWITCH}        	{return SWITCH_KEYWORD;}
{DOUBLE} 			{return DOUBLE_KEYWORD;}
{LONG}				{return LONG_KEYWORD;}
{ELSE}				{return ELSE_KEYWORD;}
{MATRIX}			{return MATRIX_KEYWORD;}


"("                 { return (int)'('; }
")"                 { return (int)')'; }
"["                 { return (int)'['; }
"]"                 { return (int)']'; }
"{"                 { return (int)'{'; }
"}"                 { return (int)'}'; }
"."                 { return (int)'.'; }
"->"                { return ARROW_OP; }
"++"                { return INCREMENT_OP; }
"--"                { return DECREMENT_OP; }
"<="                { return LESS_EQUAL_OP; }
">="                { return GREAT_EQUAL_OP; }
"=="                { return EQUAL_EQUAL_OP; }
"!="                { return NOT_EQUAL_OP; }
"*="                { return MUL_ASSIGN_OP; }
"/="                { return DIV_ASSIGN_OP; }
"%="                { return MODULO_ASSIGN_OP; }
"+="                { return ADD_ASSIGN_OP; }
"-="                { return SUB_ASSIGN_OP; }
"<<="               { return SL_ASSIGN_OP; }
">>="               { return SR_ASSIGN_OP; }
"&="                { return AND_ASSIGN_OP; }
"^="                { return XOR_ASSIGN_OP; }
"|="                { return OR_ASSIGN_OP; }
"&"                 { return AND_OP; }
"*"                 { return (int)'*'; }
"+"                 { return (int)'+'; }
"-"                 { return (int)'-'; }
"~"                 { return (int)'~'; }
"!"                 { return (int)'!'; }
"/"                 { return (int)'/'; }
"%"                 { return (int)'%'; }
"<<"                { return SL_OP; }
">>"                { return SR_OP; }
".'"				{return TRANSPOSE_OP; }
"<"                 { return (int)'<'; }
">"                 { return (int)'>'; }

"^"                 { return (int)'^'; }
"|"                 { return (int)'|'; }
"&&"                { return LOGICAL_AND_OP; }
"||"                { return LOGICAL_OR_OP; }
"?"                 { return (int)'?'; }
":"                 { return (int)':'; }
";"                 { return (int)';'; }
"="                 { return (int)'='; }
","                 { return (int)','; }
"#"                 { return (int)'#'; }



{ID}                { return IDENTIFIER;}
{INT_CONST}         { return INT_CONST;}
{FLOAT_CONST}       { return FLOAT_CONST;}
{CHAR_CONST}        { return CHAR_CONST;}
{ENUM_CONST}        { return ENUM_CONST;}
{STR_LITERAL}       { return STRING_LITERAL;}

%%
