void main()
type_specifier  =>  void
declaration_specifiers  =>  type_specifier
direct_declarator  =>  identifier
direct_declarator  =>  direct_declarator ( )

{
declarator  =>  direct_declarator
declaration_list_opt  =>  EMPTY STRING

Matrix a[2][3],b[2][3];
type_specifier  =>  Matrix
declaration_specifiers  =>  type_specifier
direct_declarator  =>  identifier
constant  =>  INTEGER CONSTANT
primary_expression  =>  constant
postfix_expression  =>  primary_expression
unary_expression  =>  postfix_expression
cast_expression  =>  unary_expression
multiplicative_expression  =>  cast_expression
additive_expression  =>  multiplicative_expression
shift_expression  =>  additive_expression
relational_expression  =>  shift_expression
equality_expression  =>  relational_expression
AND_expression  =>  equality_expression
exclusive_OR_expression  =>  AND_expression
inclusive_OR_expression  =>  exclusive_OR_expression
logical_AND_expression  =>  inclusive_OR_expression
logical_OR_expression  =>  logical_AND_expression
conditional_expression  =>  logical_OR_expression
assignment_expression  =>  conditional_expression
direct_declarator  =>  direct_declarator [ assignment_expression ]
constant  =>  INTEGER CONSTANT
primary_expression  =>  constant
postfix_expression  =>  primary_expression
unary_expression  =>  postfix_expression
cast_expression  =>  unary_expression
multiplicative_expression  =>  cast_expression
additive_expression  =>  multiplicative_expression
shift_expression  =>  additive_expression
relational_expression  =>  shift_expression
equality_expression  =>  relational_expression
AND_expression  =>  equality_expression
exclusive_OR_expression  =>  AND_expression
inclusive_OR_expression  =>  exclusive_OR_expression
logical_AND_expression  =>  inclusive_OR_expression
logical_OR_expression  =>  logical_AND_expression
conditional_expression  =>  logical_OR_expression
assignment_expression  =>  conditional_expression
direct_declarator  =>  direct_declarator [ assignment_expression ]
declarator  =>  direct_declarator
init_declarator  =>  declarator
init_declarator_list  =>  init_declarator
direct_declarator  =>  identifier
constant  =>  INTEGER CONSTANT
primary_expression  =>  constant
postfix_expression  =>  primary_expression
unary_expression  =>  postfix_expression
cast_expression  =>  unary_expression
multiplicative_expression  =>  cast_expression
additive_expression  =>  multiplicative_expression
shift_expression  =>  additive_expression
relational_expression  =>  shift_expression
equality_expression  =>  relational_expression
AND_expression  =>  equality_expression
exclusive_OR_expression  =>  AND_expression
inclusive_OR_expression  =>  exclusive_OR_expression
logical_AND_expression  =>  inclusive_OR_expression
logical_OR_expression  =>  logical_AND_expression
conditional_expression  =>  logical_OR_expression
assignment_expression  =>  conditional_expression
direct_declarator  =>  direct_declarator [ assignment_expression ]
constant  =>  INTEGER CONSTANT
primary_expression  =>  constant
postfix_expression  =>  primary_expression
unary_expression  =>  postfix_expression
cast_expression  =>  unary_expression
multiplicative_expression  =>  cast_expression
additive_expression  =>  multiplicative_expression
shift_expression  =>  additive_expression
relational_expression  =>  shift_expression
equality_expression  =>  relational_expression
AND_expression  =>  equality_expression
exclusive_OR_expression  =>  AND_expression
inclusive_OR_expression  =>  exclusive_OR_expression
logical_AND_expression  =>  inclusive_OR_expression
logical_OR_expression  =>  logical_AND_expression
conditional_expression  =>  logical_OR_expression
assignment_expression  =>  conditional_expression
direct_declarator  =>  direct_declarator [ assignment_expression ]
declarator  =>  direct_declarator
init_declarator  =>  declarator
init_declarator_list  =>  init_declarator_list, init_declarator
declaration  =>  declaration_specifiers init_declarator_list ;
block_item  =>  declaration
block_item_list  =>  block_item

Matrix c[2][3];
type_specifier  =>  Matrix
declaration_specifiers  =>  type_specifier
direct_declarator  =>  identifier
constant  =>  INTEGER CONSTANT
primary_expression  =>  constant
postfix_expression  =>  primary_expression
unary_expression  =>  postfix_expression
cast_expression  =>  unary_expression
multiplicative_expression  =>  cast_expression
additive_expression  =>  multiplicative_expression
shift_expression  =>  additive_expression
relational_expression  =>  shift_expression
equality_expression  =>  relational_expression
AND_expression  =>  equality_expression
exclusive_OR_expression  =>  AND_expression
inclusive_OR_expression  =>  exclusive_OR_expression
logical_AND_expression  =>  inclusive_OR_expression
logical_OR_expression  =>  logical_AND_expression
conditional_expression  =>  logical_OR_expression
assignment_expression  =>  conditional_expression
direct_declarator  =>  direct_declarator [ assignment_expression ]
constant  =>  INTEGER CONSTANT
primary_expression  =>  constant
postfix_expression  =>  primary_expression
unary_expression  =>  postfix_expression
cast_expression  =>  unary_expression
multiplicative_expression  =>  cast_expression
additive_expression  =>  multiplicative_expression
shift_expression  =>  additive_expression
relational_expression  =>  shift_expression
equality_expression  =>  relational_expression
AND_expression  =>  equality_expression
exclusive_OR_expression  =>  AND_expression
inclusive_OR_expression  =>  exclusive_OR_expression
logical_AND_expression  =>  inclusive_OR_expression
logical_OR_expression  =>  logical_AND_expression
conditional_expression  =>  logical_OR_expression
assignment_expression  =>  conditional_expression
direct_declarator  =>  direct_declarator [ assignment_expression ]
declarator  =>  direct_declarator
init_declarator  =>  declarator
init_declarator_list  =>  init_declarator
declaration  =>  declaration_specifiers init_declarator_list ;
block_item  =>  declaration
block_item_list  =>  block_item_list block_item

c=a+b;
primary_expression  =>  identifier
postfix_expression  =>  primary_expression
unary_expression  =>  postfix_expression
assignment_operator  =>  =
primary_expression  =>  identifier
postfix_expression  =>  primary_expression
unary_expression  =>  postfix_expression
cast_expression  =>  unary_expression
multiplicative_expression  =>  cast_expression
additive_expression  =>  multiplicative_expression
primary_expression  =>  identifier
postfix_expression  =>  primary_expression
unary_expression  =>  postfix_expression
cast_expression  =>  unary_expression
multiplicative_expression  =>  cast_expression
additive_expression  =>  additive_expression + multiplicative_expression
shift_expression  =>  additive_expression
relational_expression  =>  shift_expression
equality_expression  =>  relational_expression
AND_expression  =>  equality_expression
exclusive_OR_expression  =>  AND_expression
inclusive_OR_expression  =>  exclusive_OR_expression
logical_AND_expression  =>  inclusive_OR_expression
logical_OR_expression  =>  logical_AND_expression
conditional_expression  =>  logical_OR_expression
assignment_expression  =>  conditional_expression
assignment_expression  =>  unary_expression assignment_operator assignment_expression
expression  =>  assignment_expression
expression_statement  =>  expression ;
statement  =>  expression_statement
block_item  =>  statement
block_item_list  =>  block_item_list block_item
 
}
compound_statement  =>  { block_item_list }
function_definition  =>  declaration_specifiers declarator declaration_list_opt compound_statement
external_declaration  =>  function_definition
translation_unit  =>  external_declaration